load("@cxx.rs//tools/bazel:rust_cxx_bridge.bzl", "rust_cxx_bridge")
load("@rules_rust//rust:defs.bzl", "rust_binary")

cc_library(
    name = "engine",
    srcs = [
        "src/engine.cpp",
        "src/engine.hpp",
    ],
    deps = [
        "@rules_cuda//cuda:runtime",
        "@tensorrt//:nvinfer",
        "@tensorrt//:nvinferplugin",
    ],
)

cc_library(
    name = "rtmo_header",
    hdrs = ["src/rtmo.hpp"],
    includes = ["src"],
)

cc_library(
    name = "rtmo",
    srcs = [
        "src/rtmo.cpp",
    ],
    deps = [
        ":engine",
        ":rtmo_header",
        "@cxx.rs//:core",
        "@cvcuda",
        ":rtmo_bridge/include",
    ],
)

rust_cxx_bridge(
    name = "rtmo_bridge",
    src = "src/rtmo.rs",
    deps = [
        ":engine",
        ":rtmo",
        "@opencv",
        "@rules_cuda//cuda:runtime",
    ],
)

rust_binary(
    name = "main",
    srcs = glob(["src/*.rs"]),
    deps = [
        ":rtmo",
        ":rtmo_bridge",
        "@cxx.rs//:cxx",
	"@crates//:image",
    ],
)

cc_binary(
    name = "video_demo",
    srcs = [
        "src/video_demo.cpp",
    ],
    deps = [
        "engine",
        "@byte_track_eigen",
        "@cvcuda",
        "@opencv",
    ],
)

cc_binary(
    name = "image_demo",
    srcs = [
        "src/image_demo.cpp",
    ],
    deps = [
        "engine",
        "@cvcuda",
        "@opencv",
    ],
)
